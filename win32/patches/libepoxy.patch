diff -upr -x .deps -x .libs -x '*.la' -x '*.lo' libepoxy-1.2/configure.ac libepoxy-1.2.new/configure.ac
--- libepoxy-1.2/configure.ac	2014-05-14 00:22:08 +0000
+++ libepoxy-1.2.new/configure.ac	2015-07-05 17:19:01 +0000
@@ -32,13 +32,13 @@ AC_CONFIG_HEADERS([config.h])
 AM_INIT_AUTOMAKE([foreign dist-bzip2 subdir-objects])
 
 # Require X.Org macros 1.8 or later for MAN_SUBSTS set by XORG_MANPAGE_SECTIONS
-m4_ifndef([XORG_MACROS_VERSION],
-          [m4_fatal([must install xorg-macros 1.8 or later before running autoconf/autogen.
-  Hint: either install from source, git://anongit.freedesktop.org/xorg/util/macros or,
-  depending on you distribution, try package 'xutils-dev' or 'xorg-x11-util-macros'])])
-
-XORG_MACROS_VERSION(1.8)
-XORG_DEFAULT_OPTIONS
+#m4_ifndef([XORG_MACROS_VERSION],
+#          [m4_fatal([must install xorg-macros 1.8 or later before running autoconf/autogen.
+#  Hint: either install from source, git://anongit.freedesktop.org/xorg/util/macros or,
+#  depending on you distribution, try package 'xutils-dev' or 'xorg-x11-util-macros'])])
+#
+#XORG_MACROS_VERSION(1.8)
+#XORG_DEFAULT_OPTIONS
 
 AC_CHECK_PROGS([PYTHON], [python3 python2 python])
 
@@ -56,7 +56,7 @@ AC_CHECK_HEADER([KHR/khrplatform.h],
 
 # OS X defaults to having -Wint-conversion ("warn when passing
 # uintptr_t to a void *") by default.  Kill that.
-XORG_TESTSET_CFLAG(CWARNFLAGS, [-Wno-int-conversion])
+#XORG_TESTSET_CFLAG(CWARNFLAGS, [-Wno-int-conversion])
 
 has_znow=yes
 
diff -upr -x .deps -x .libs -x '*.la' -x '*.lo' libepoxy-1.2/src/dispatch_common.c libepoxy-1.2.new/src/dispatch_common.c
--- libepoxy-1.2/src/dispatch_common.c	2014-05-14 00:22:08 +0000
+++ libepoxy-1.2.new/src/dispatch_common.c	2015-07-05 17:21:58 +0000
@@ -318,13 +318,13 @@ epoxy_internal_has_gl_extension(const ch
             return invalid_op_mode;
         return epoxy_extension_in_string(exts, ext);
     } else {
-        int num_extensions;
+        int num_extensions, i;
 
         glGetIntegerv(GL_NUM_EXTENSIONS, &num_extensions);
         if (num_extensions == 0)
             return invalid_op_mode;
 
-        for (int i = 0; i < num_extensions; i++) {
+        for (i = 0; i < num_extensions; i++) {
             const char *gl_ext = (const char *)glGetStringi(GL_EXTENSIONS, i);
             if (strcmp(ext, gl_ext) == 0)
                 return true;
